
package cz.wincor.jonas.ws.echo;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import jakarta.xml.ws.Service;
import jakarta.xml.ws.WebEndpoint;
import jakarta.xml.ws.WebServiceClient;
import jakarta.xml.ws.WebServiceException;
import jakarta.xml.ws.WebServiceFeature;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebServiceClient(name = "EchoWSService", targetNamespace = "http://echo.ws.jonas.wincor.cz", wsdlLocation = "file:/tmp/wstest/echo.wsdl")
public class EchoWSService
    extends Service
{

    private final static URL ECHOWSSERVICE_WSDL_LOCATION;
    private final static WebServiceException ECHOWSSERVICE_EXCEPTION;
    private final static QName ECHOWSSERVICE_QNAME = new QName("http://echo.ws.jonas.wincor.cz", "EchoWSService");

    static {
        URL url = null;
        WebServiceException e = null;
        try {
            url = new URL("file:/tmp/wstest/echo.wsdl");
        } catch (MalformedURLException ex) {
            e = new WebServiceException(ex);
        }
        ECHOWSSERVICE_WSDL_LOCATION = url;
        ECHOWSSERVICE_EXCEPTION = e;
    }

    public EchoWSService() {
        super(__getWsdlLocation(), ECHOWSSERVICE_QNAME);
    }

    public EchoWSService(WebServiceFeature... features) {
        super(__getWsdlLocation(), ECHOWSSERVICE_QNAME, features);
    }

    public EchoWSService(URL wsdlLocation) {
        super(wsdlLocation, ECHOWSSERVICE_QNAME);
    }

    public EchoWSService(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, ECHOWSSERVICE_QNAME, features);
    }

    public EchoWSService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public EchoWSService(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     * 
     * @return
     *     returns EchoWSPort
     */
    @WebEndpoint(name = "EchoWSPort")
    public EchoWSPort getEchoWSPort() {
        return super.getPort(new QName("http://echo.ws.jonas.wincor.cz", "EchoWSPort"), EchoWSPort.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link jakarta.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns EchoWSPort
     */
    @WebEndpoint(name = "EchoWSPort")
    public EchoWSPort getEchoWSPort(WebServiceFeature... features) {
        return super.getPort(new QName("http://echo.ws.jonas.wincor.cz", "EchoWSPort"), EchoWSPort.class, features);
    }

    private static URL __getWsdlLocation() {
        if (ECHOWSSERVICE_EXCEPTION!= null) {
            throw ECHOWSSERVICE_EXCEPTION;
        }
        return ECHOWSSERVICE_WSDL_LOCATION;
    }

}
